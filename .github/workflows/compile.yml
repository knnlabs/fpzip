name: Compile fpzip Library (Multi-architecture)

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, arm64]
        exclude:
          # GitHub-hosted runners don't support macOS ARM64 natively
          - os: macos-latest
            arch: arm64
        include:
          - os: ubuntu-latest
            arch: x86_64
            cmake_generator: "Unix Makefiles"
          - os: ubuntu-latest
            arch: arm64
            cmake_generator: "Unix Makefiles"
          - os: macos-latest
            arch: x86_64
            cmake_generator: "Unix Makefiles"
          - os: windows-latest
            arch: x86_64
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A x64"
          - os: windows-latest
            arch: arm64
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A ARM64"

    steps:
    - uses: actions/checkout@v2

    - name: Set up QEMU
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v2

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "${{ matrix.cmake_generator }}" ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_UTILITIES=OFF -DBUILD_TESTING=OFF

    - name: Build
      working-directory: ./build
      run: cmake --build . --config Release

    - name: Package Library
      shell: bash
      run: |
        mkdir artifacts
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp build/lib/Release/*.lib artifacts/ || true
          cp build/bin/Release/*.dll artifacts/ || true
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          cp build/lib/*.dylib artifacts/ || true
        else
          cp build/lib/*.so artifacts/ || true
        fi
        echo "Build directory contents:"
        ls -R build
        echo "Artifacts directory contents:"
        ls -R artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: fpzip-${{ matrix.os }}-${{ matrix.arch }}
        path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}-${{ github.sha }}
        release_name: Release ${{ github.ref }}-${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .
        asset_name: fpzip-multi-arch.zip
        asset_content_type: application/zip
