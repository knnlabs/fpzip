name: Compile fpzip Library (Multi-platform)

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: ubuntu-x86_64
            os: ubuntu-latest
            arch: x86_64
            cmake_generator: "Unix Makefiles"
          - name: ubuntu-arm64
            os: ubuntu-latest
            arch: arm64
            cmake_generator: "Unix Makefiles"
          - name: macos-x86_64
            os: macos-latest
            arch: x86_64
            cmake_generator: "Unix Makefiles"
          - name: windows-x86_64
            os: windows-latest
            arch: x86_64
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A x64"
          - name: windows-arm64
            os: windows-latest
            arch: arm64
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A ARM64"
          - name: ios
            os: macos-latest
            cmake_generator: "Xcode"
            cmake_toolchain: "-DCMAKE_TOOLCHAIN_FILE=../ios.toolchain.cmake -DPLATFORM=OS64"
          - name: android
            os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
            cmake_toolchain: "-DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-21"
          - name: freebsd
            os: ubuntu-latest
            container: freebsd/freebsd-ci:13.2

    steps:
    - uses: actions/checkout@v2

    - name: Set up QEMU
      if: matrix.name == 'ubuntu-arm64'
      uses: docker/setup-qemu-action@v2

    - name: Setup Android NDK
      if: matrix.name == 'android'
      uses: android-actions/setup-android@v2

    - name: Install iOS toolchain
      if: matrix.name == 'ios'
      run: |
        curl -L https://github.com/leetal/ios-cmake/raw/master/ios.toolchain.cmake -o ios.toolchain.cmake

    - name: Install FreeBSD dependencies
      if: matrix.name == 'freebsd'
      run: |
        pkg update
        pkg install -y cmake

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "${{ matrix.cmake_generator }}" ${{ matrix.cmake_arch }} ${{ matrix.cmake_toolchain }} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_UTILITIES=OFF -DBUILD_TESTING=OFF

    - name: Build
      working-directory: ./build
      run: cmake --build . --config Release

    - name: Package Library
      shell: bash
      run: |
        mkdir artifacts
        if [ "${{ matrix.name }}" == "windows-x86_64" ] || [ "${{ matrix.name }}" == "windows-arm64" ]; then
          cp build/lib/Release/*.lib artifacts/ || true
          cp build/bin/Release/*.dll artifacts/ || true
        elif [ "${{ matrix.name }}" == "macos-x86_64" ]; then
          cp build/lib/*.dylib artifacts/ || true
        elif [ "${{ matrix.name }}" == "ios" ]; then
          cp build/lib/*.a artifacts/ || true
        elif [ "${{ matrix.name }}" == "android" ] || [ "${{ matrix.name }}" == "freebsd" ]; then
          cp build/lib/*.so artifacts/ || true
        else
          cp build/lib/*.so artifacts/ || true
        fi
        echo "Build directory contents:"
        ls -R build
        echo "Artifacts directory contents:"
        ls -R artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: fpzip-${{ matrix.name }}
        path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}-${{ github.sha }}
        release_name: Release ${{ github.ref }}-${{ github.sha }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .
        asset_name: fpzip-multi-platform.zip
        asset_content_type: application/zip
